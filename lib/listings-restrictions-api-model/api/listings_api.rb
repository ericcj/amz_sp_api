=begin
#Selling Partner API for Listings Restrictions

#The Selling Partner API for Listings Restrictions provides programmatic access to restrictions on Amazon catalog listings.  For more information, see the [Listings Restrictions API Use Case Guide](doc:listings-restrictions-api-v2021-08-01-use-case-guide).

OpenAPI spec version: 2021-08-01

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.46
=end

module AmzSpApi::ListingsRestrictionsApiModel
  class ListingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns listing restrictions for an item in the Amazon Catalog.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param asin The Amazon Standard Identification Number (ASIN) of the item.
    # @param seller_id A selling partner identifier, such as a merchant account.
    # @param marketplace_ids A comma-delimited list of Amazon marketplace identifiers for the request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :condition_type The condition used to filter restrictions.
    # @option opts [String] :reason_locale A locale for reason text localization. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale.
    # @return [RestrictionList]
    def get_listings_restrictions(asin, seller_id, marketplace_ids, opts = {})
      data, _status_code, _headers = get_listings_restrictions_with_http_info(asin, seller_id, marketplace_ids, opts)
      data
    end

    # Returns listing restrictions for an item in the Amazon Catalog.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
    # @param asin The Amazon Standard Identification Number (ASIN) of the item.
    # @param seller_id A selling partner identifier, such as a merchant account.
    # @param marketplace_ids A comma-delimited list of Amazon marketplace identifiers for the request.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :condition_type The condition used to filter restrictions.
    # @option opts [String] :reason_locale A locale for reason text localization. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale.
    # @return [Array<(RestrictionList, Integer, Hash)>] RestrictionList data, response status code and response headers
    def get_listings_restrictions_with_http_info(asin, seller_id, marketplace_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.get_listings_restrictions ...'
      end
      # verify the required parameter 'asin' is set
      if @api_client.config.client_side_validation && asin.nil?
        fail ArgumentError, "Missing the required parameter 'asin' when calling ListingsApi.get_listings_restrictions"
      end
      # verify the required parameter 'seller_id' is set
      if @api_client.config.client_side_validation && seller_id.nil?
        fail ArgumentError, "Missing the required parameter 'seller_id' when calling ListingsApi.get_listings_restrictions"
      end
      # verify the required parameter 'marketplace_ids' is set
      if @api_client.config.client_side_validation && marketplace_ids.nil?
        fail ArgumentError, "Missing the required parameter 'marketplace_ids' when calling ListingsApi.get_listings_restrictions"
      end
      if @api_client.config.client_side_validation && opts[:'condition_type'] && !['new_new', 'new_open_box', 'new_oem', 'refurbished_refurbished', 'used_like_new', 'used_very_good', 'used_good', 'used_acceptable', 'collectible_like_new', 'collectible_very_good', 'collectible_good', 'collectible_acceptable', 'club_club'].include?(opts[:'condition_type'])
        fail ArgumentError, 'invalid value for "condition_type", must be one of new_new, new_open_box, new_oem, refurbished_refurbished, used_like_new, used_very_good, used_good, used_acceptable, collectible_like_new, collectible_very_good, collectible_good, collectible_acceptable, club_club'
      end
      # resource path
      local_var_path = '/listings/2021-08-01/restrictions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'asin'] = asin
      query_params[:'sellerId'] = seller_id
      query_params[:'marketplaceIds'] = @api_client.build_collection_param(marketplace_ids, :csv)
      query_params[:'conditionType'] = opts[:'condition_type'] if !opts[:'condition_type'].nil?
      query_params[:'reasonLocale'] = opts[:'reason_locale'] if !opts[:'reason_locale'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'RestrictionList' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#get_listings_restrictions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
