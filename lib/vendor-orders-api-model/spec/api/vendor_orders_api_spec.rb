=begin
#Selling Partner API for Retail Procurement Orders

#The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.24
=end

require 'spec_helper'
require 'json'

# Unit tests for AmzSpApi::VendorOrdersApiModel::VendorOrdersApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'VendorOrdersApi' do
  before do
    # run before each test
    @instance = AmzSpApi::VendorOrdersApiModel::VendorOrdersApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of VendorOrdersApi' do
    it 'should create an instance of VendorOrdersApi' do
      expect(@instance).to be_instance_of(AmzSpApi::VendorOrdersApiModel::VendorOrdersApi)
    end
  end

  # unit tests for get_purchase_order
  # Returns a purchase order based on the purchaseOrderNumber value that you specify.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
  # @param purchase_order_number The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code.
  # @param [Hash] opts the optional parameters
  # @return [GetPurchaseOrderResponse]
  describe 'get_purchase_order test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_purchase_orders
  # Returns a list of purchase orders created or changed during the time frame that you specify. You define the time frame using the createdAfter, createdBefore, changedAfter and changedBefore parameters. The date range to search must not be more than 7 days. You can choose to get only the purchase order numbers by setting includeDetails to false. You can then use the getPurchaseOrder operation to receive details for a specific purchase order.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The limit to the number of records returned. Default value is 100 records.
  # @option opts [DateTime] :created_after Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format.
  # @option opts [DateTime] :created_before Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format.
  # @option opts [String] :sort_order Sort in ascending or descending order by purchase order creation date.
  # @option opts [String] :next_token Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call
  # @option opts [String] :include_details When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true.
  # @option opts [DateTime] :changed_after Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
  # @option opts [DateTime] :changed_before Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
  # @option opts [String] :po_item_state Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero.
  # @option opts [String] :is_po_changed When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false.
  # @option opts [String] :purchase_order_state Filters purchase orders based on the purchase order state.
  # @option opts [String] :ordering_vendor_code Filters purchase orders based on the specified ordering vendor code. This value should be same as &#x27;sellingParty.partyId&#x27; in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned.
  # @return [GetPurchaseOrdersResponse]
  describe 'get_purchase_orders test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_purchase_orders_status
  # Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order status by providing the purchase order number.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The limit to the number of records returned. Default value is 100 records.
  # @option opts [String] :sort_order Sort in ascending or descending order by purchase order creation date.
  # @option opts [String] :next_token Used for pagination when there are more purchase orders than the specified result size limit.
  # @option opts [DateTime] :created_after Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
  # @option opts [DateTime] :created_before Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
  # @option opts [DateTime] :updated_after Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
  # @option opts [DateTime] :updated_before Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
  # @option opts [String] :purchase_order_number Provides purchase order status for the specified purchase order number.
  # @option opts [String] :purchase_order_status Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses.
  # @option opts [String] :item_confirmation_status Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included.
  # @option opts [String] :item_receive_status Filters purchase orders based on the purchase order&#x27;s item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included.
  # @option opts [String] :ordering_vendor_code Filters purchase orders based on the specified ordering vendor code. This value should be same as &#x27;sellingParty.partyId&#x27; in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned.
  # @option opts [String] :ship_to_party_id Filters purchase orders for a specific buyer&#x27;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as &#x27;shipToParty.partyId&#x27; in the purchase order. If not included in filter, this will return purchase orders for all the buyer&#x27;s warehouses used for vendor group purchase orders.
  # @return [GetPurchaseOrdersStatusResponse]
  describe 'get_purchase_orders_status test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for submit_acknowledgement
  # Submits acknowledgements for one or more purchase orders.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [SubmitAcknowledgementResponse]
  describe 'submit_acknowledgement test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
